// Rewitten to LLJS by Mattias Festin
// Twitter @MattiasFestin
// GitHub MattiasFestin
// Blog http://mattiasfest.in/

// ORIGINAL AUTHUR COMMENTS
//-----------------------------------------------------------------------------
// https://github.com/jrslepak/murmur3/blob/master/MurmurHash3.c
// MurmurHash3 was written by Austin Appleby, and is placed in the public
// domain. The author hereby disclaims copyright to this source code.

// Note - The x86 and x64 versions do _not_ produce the same results, as the
// algorithms are optimized for their respective platforms. You can still
// compile and run any of them on any platform, but your performance with the
// non-native version will be less than optimal.

function u32 rotl32 ( u32 x, i8 r )
{
  return (x << r) | (x >> (32 - r));
}

//--------------------------------------------------------------------
// Block read - if your platform needs to do endian-swapping or can only
// handle aligned reads, do the conversion here

function u32 getblock32 ( u32 * p, int i )
{
  return p[i];
}

//--------------------------------------------------------------------
// Finalization mix - force all bits of a hash block to avalanche

function u32 fmix32 ( u32 h )
{
  h = (u32)(h ^ (h >> 16));
  h = (u32)(h * 0x85ebca6b);
  h = (u32)(h ^ (h >> 13));
  h = (u32)(h * 0xc2b2ae35);
  h = (u32)(h ^ (h >> 16));

  return h;
}

//--------------------------------------------------------------------

function void MurmurHash3_x86_128 ( u32 *key, int len, u32 seed, u32 * out )
{
  let u32 data = key;
  let int nblocks = len / 16;

  let u32 h1 = seed;
  let u32 h2 = seed;
  let u32 h3 = seed;
  let u32 h4 = seed;

  const u32 c1 = 0x239b961b; 
  const u32 c2 = 0xab0e9789;
  const u32 c3 = 0x38b34ae5; 
  const u32 c4 = 0xa1e38b93;

  //----------
  // body

  const u32 * blocks = (u32 *)(data + nblocks*16);

  for(let int i = -nblocks; i; i++)
  {
    let u32 k1 = getblock32(blocks,i*4+0);
    let u32 k2 = getblock32(blocks,i*4+1);
    let u32 k3 = getblock32(blocks,i*4+2);
    let u32 k4 = getblock32(blocks,i*4+3);

    k1 *= c1;
    k1  = rotl32(k1,15);
    k1 *= c2;
    h1 = (u32)(h1 ^ k1);
    h1 = rotl32(h1,19);
    h1 += h2;
    h1 = h1*5+0x561ccd1b;

    k2 *= c2;
    k2  = rotl32(k2,16);
    k2 *= c3;
    h2 = (u32)(h2 ^ k2);
    h2 = rotl32(h2,17);
    h2 += h3;
    h2 = h2*5+0x0bcaa747;

    k3 *= c3;
    k3  = rotl32(k3,17);
    k3 *= c4;
    h3 = (u32)(h3 ^ k3);
    h3 = rotl32(h3,15);
    h3 += h4;
    h3 = h3*5+0x96cd1c35;

    k4 *= c4;
    k4  = rotl32(k4,18);
    k4 *= c1;
    h4 = (u32)(h4 ^ k4);
    h4 = rotl32(h4,13);
    h4 += h1;
    h4 = h4*5+0x32ac3b17;
  }

  //----------
  // tail

  const u8 *tail = (u8*)(data + nblocks*16);

  let u32 k1 = 0;
  let u32 k2 = 0;
  let u32 k3 = 0;
  let u32 k4 = 0;

  switch(len & 15)
  {
  case 15: k4 = (u32)(k4 ^ (tail[14] << 16));
  case 14: k4 = (u32)(k4 ^ (tail[13] << 8 ));
  case 13: k4 = (u32)(k4 ^ (tail[12] << 0 ));
           k4 *= c4;
           k4  = rotl32(k4,18);
           k4 *= c1;
           h4 = (u32)(h4 ^ k4);

  case 12: k3 = (u32)(k3 ^ (tail[11] << 24));
  case 11: k3 = (u32)(k3 ^ (tail[10] << 16));
  case 10: k3 = (u32)(k3 ^ (tail[ 9] << 8 ));
  case  9: k3 = (u32)(k3 ^ (tail[ 8] << 0 ));
           k3 *= c3;
           k3  = rotl32(k3,17);
           k3 *= c4;
           h3 = (u32)(h3^k3);

  case  8: k2 = (u32)(k2 ^ (tail[ 7] << 24));
  case  7: k2 = (u32)(k2 ^ (tail[ 6] << 16));
  case  6: k2 = (u32)(k2 ^ (tail[ 5] << 8 ));
  case  5: k2 = (u32)(k2 ^ (tail[ 4] << 0 ));
           k2 *= c2;
           k2  = rotl32(k2,16);
           k2 *= c3;
           h2 = (u32)(h2^k2);

  case  4: k1 = (u32)(k1 ^ (tail[ 3] << 24));
  case  3: k1 = (u32)(k1 ^ (tail[ 2] << 16));
  case  2: k1 = (u32)(k1 ^ (tail[ 1] << 8 ));
  case  1: k1 = (u32)(k1 ^ (tail[ 0] << 0 ));
           k1 *= c1;
           k1  = rotl32(k1,15);
           k1 *= c2;
           h1 = (u32)(h1^k1);
  };

  //----------
  // finalization

  h1 = (u32)(h1 ^ len);
  h2 = (u32)(h2 ^ len);
  h3 = (u32)(h3 ^ len);
  h4 = (u32)(h4 ^ len);

  h1 += h2;
  h1 += h3;
  h1 += h4;
  h2 += h1;
  h3 += h1;
  h4 += h1;

  h1 = fmix32(h1);
  h2 = fmix32(h2);
  h3 = fmix32(h3);
  h4 = fmix32(h4);

  h1 += h2;
  h1 += h3;
  h1 += h4;
  h2 += h1;
  h3 += h1;
  h4 += h1;

  out[0] = h1;
  out[1] = h2;
  out[2] = h3;
  out[3] = h4;
}

//--------------------------------------------------------------------